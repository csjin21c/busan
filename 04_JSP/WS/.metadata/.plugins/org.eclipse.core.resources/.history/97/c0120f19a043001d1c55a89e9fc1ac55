package pkgJDBC;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class BbsDAO {
	private Connection conn;
	private ResultSet rs;
	
	public void BbsDAO() {
		//bbsConnect();
	} 
	
	/* #########################################################################
		데이터베이스 연결 메서드
	######################################################################### */
	public void bbsConnect() {
		try {
			String dbURL = "jdbc:mysql://localhost:3306/study";
			String dbID = "devUser";
			String dbPassw = "devUser2022!";
			
			Class.forName("com.mysql.cj.jdbc.Driver");
			conn = DriverManager.getConnection(dbURL, dbID, dbPassw);
			System.out.println("DB연결 성공");
		}
		catch(Exception e) {
			System.out.println("DB연결 실패");
			e.printStackTrace();
		}
	}//e:bbsConnect()
	

	/* #########################################################################
		신규 글 삽입을 위한 idx와 list값을 생성하는 메서드
		Map 사용연습을 위해 배열을 을 사용하여 구성함.
	######################################################################### */
	public Map<String, Integer> getIdx() {
		Map<String, Integer> mapOutput = new HashMap<>();
		try {
			bbsConnect();
			String SQL="SELECT IFNULL(MAX(FIDX)+1,1) aidx"
					+ ", IFNULL(MAX(FLIST)+1,1) alist"
					+ " FROM TBOARD";
			PreparedStatement pstmt = conn.prepareStatement(SQL);
			System.out.println("Statement객체 생성 성공");
			
			rs = pstmt.executeQuery();
			if (rs.next()) {
				mapOutput.put("idx", rs.getInt("aidx"));//String로 데이터 변경하여 처리
				mapOutput.put("list", rs.getInt("alist"));//column명이 FLIST로 변경됨
			}
			rs.close();//result set 객체를 닫아줌.
			return mapOutput;//반환 받은 FIDX값을 반환
		}catch(Exception e) {
			return null;//에러 발생시
		}
	}//e:getIdx()

	/* #########################################################################
		게시판 목록을 만들기 위한 설정.
	######################################################################### */
	public ArrayList<BoardField> getList(int pageNum, int groupNum) {
		String SQL = "SELECT * FROM TBOARD WHERE ORDER BY FGROUP DESC, FSTEP DESC LIMIT ? 10 ";
		ArrayList<BoardField> boardList = new ArrayList<BoardField>();
		try {
			PreparedStatement pstmt = conn.prepareStatement(SQL);
			pstmt.setInt(1,  ((pageNum - 1) * 10));
			pstmt.setInt(2,  groupNum);
			rs = pstmt.executeQuery();
			while(rs.next()) {
				BoardField board = new BoardField();
				board.setIdx(rs.getInt("fidx"));
				board.setGroup(rs.getInt("fgroup"));
				board.setLevel(rs.getInt("flevel"));
				board.setStep(rs.getInt("fstep"));
				board.setList(rs.getInt("flist"));
				board.setHit(rs.getInt("fhit"));
				board.setHeader(rs.getInt("fheader"));
				board.setTop(rs.getString("ftop"));
				board.setSubject(rs.getString("fsubject"));
				board.setContent(rs.getString("fcontent"));
				board.setUserid(rs.getString("fid"));
				board.setWriter(rs.getString("fname"));
				board.setPw(rs.getString("fpassw"));
				board.setDel(rs.getString("fdeleted"));
				board.setWdate(rs.getString("fdate"));
				boardList.add(board);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return boardList;
	}
	
}//e:class BbsDAO

